12 Facator App Princple for Cloud Native.

I. Codebase
One codebase tracked in revision control, many deploys
II. Dependencies : 

It talks about managing the dependencies externally using dependency management tools instead of adding them to your codebase.  pom.xml or build.gradle

III. Config : Store config in the environment , all yml files.
IV. Backing services : Database, Message Brokers, any other external systems that the app communicates is treated as Backing service

V. Build, release, run : Strictly separate build and run stages

 You can use CI/CD tools to automate the builds and deployment process. Docker images make it easy to separate the build, release, and run stages more efficiently.


VI. Processes : Execute the app as one or more stateless processes (use redis)
VII. Port binding
Export services via port binding
VIII. Concurrency : Scale out via the process model
IX. Disposability : Maximize robustness with fast startup and graceful shutdown
X. Dev/prod parity : Keep development, staging, and production as similar as possible
XI. Logs
Treat logs as event streams
XII. Admin processes
Run admin/management tasks as one-off processes